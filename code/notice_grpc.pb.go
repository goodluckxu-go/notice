// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.2
// source: proto/notice.proto

package code

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Notice_Register_FullMethodName    = "/grpc.Notice/Register"
	Notice_AddClient_FullMethodName   = "/grpc.Notice/AddClient"
	Notice_DelClient_FullMethodName   = "/grpc.Notice/DelClient"
	Notice_SendMessage_FullMethodName = "/grpc.Notice/SendMessage"
	Notice_RecvMessage_FullMethodName = "/grpc.Notice/RecvMessage"
)

// NoticeClient is the client API for Notice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NoticeClient interface {
	// 注册到服务器中获取在服务器中的编号
	Register(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Service, error)
	// 添加客户端
	AddClient(ctx context.Context, opts ...grpc.CallOption) (Notice_AddClientClient, error)
	// 删除客户端
	DelClient(ctx context.Context, in *ClientReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 将消息发送到服务端
	SendMessage(ctx context.Context, in *SendReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 接受服务端消息
	RecvMessage(ctx context.Context, in *Service, opts ...grpc.CallOption) (Notice_RecvMessageClient, error)
}

type noticeClient struct {
	cc grpc.ClientConnInterface
}

func NewNoticeClient(cc grpc.ClientConnInterface) NoticeClient {
	return &noticeClient{cc}
}

func (c *noticeClient) Register(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Service, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Service)
	err := c.cc.Invoke(ctx, Notice_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noticeClient) AddClient(ctx context.Context, opts ...grpc.CallOption) (Notice_AddClientClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Notice_ServiceDesc.Streams[0], Notice_AddClient_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &noticeAddClientClient{ClientStream: stream}
	return x, nil
}

type Notice_AddClientClient interface {
	Send(*ClientReq) error
	CloseAndRecv() (*emptypb.Empty, error)
	grpc.ClientStream
}

type noticeAddClientClient struct {
	grpc.ClientStream
}

func (x *noticeAddClientClient) Send(m *ClientReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *noticeAddClientClient) CloseAndRecv() (*emptypb.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(emptypb.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *noticeClient) DelClient(ctx context.Context, in *ClientReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Notice_DelClient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noticeClient) SendMessage(ctx context.Context, in *SendReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Notice_SendMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noticeClient) RecvMessage(ctx context.Context, in *Service, opts ...grpc.CallOption) (Notice_RecvMessageClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Notice_ServiceDesc.Streams[1], Notice_RecvMessage_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &noticeRecvMessageClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Notice_RecvMessageClient interface {
	Recv() (*RecvResp, error)
	grpc.ClientStream
}

type noticeRecvMessageClient struct {
	grpc.ClientStream
}

func (x *noticeRecvMessageClient) Recv() (*RecvResp, error) {
	m := new(RecvResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NoticeServer is the server API for Notice service.
// All implementations must embed UnimplementedNoticeServer
// for forward compatibility
type NoticeServer interface {
	// 注册到服务器中获取在服务器中的编号
	Register(context.Context, *emptypb.Empty) (*Service, error)
	// 添加客户端
	AddClient(Notice_AddClientServer) error
	// 删除客户端
	DelClient(context.Context, *ClientReq) (*emptypb.Empty, error)
	// 将消息发送到服务端
	SendMessage(context.Context, *SendReq) (*emptypb.Empty, error)
	// 接受服务端消息
	RecvMessage(*Service, Notice_RecvMessageServer) error
	mustEmbedUnimplementedNoticeServer()
}

// UnimplementedNoticeServer must be embedded to have forward compatible implementations.
type UnimplementedNoticeServer struct {
}

func (UnimplementedNoticeServer) Register(context.Context, *emptypb.Empty) (*Service, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedNoticeServer) AddClient(Notice_AddClientServer) error {
	return status.Errorf(codes.Unimplemented, "method AddClient not implemented")
}
func (UnimplementedNoticeServer) DelClient(context.Context, *ClientReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelClient not implemented")
}
func (UnimplementedNoticeServer) SendMessage(context.Context, *SendReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedNoticeServer) RecvMessage(*Service, Notice_RecvMessageServer) error {
	return status.Errorf(codes.Unimplemented, "method RecvMessage not implemented")
}
func (UnimplementedNoticeServer) mustEmbedUnimplementedNoticeServer() {}

// UnsafeNoticeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NoticeServer will
// result in compilation errors.
type UnsafeNoticeServer interface {
	mustEmbedUnimplementedNoticeServer()
}

func RegisterNoticeServer(s grpc.ServiceRegistrar, srv NoticeServer) {
	s.RegisterService(&Notice_ServiceDesc, srv)
}

func _Notice_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoticeServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Notice_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoticeServer).Register(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notice_AddClient_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NoticeServer).AddClient(&noticeAddClientServer{ServerStream: stream})
}

type Notice_AddClientServer interface {
	SendAndClose(*emptypb.Empty) error
	Recv() (*ClientReq, error)
	grpc.ServerStream
}

type noticeAddClientServer struct {
	grpc.ServerStream
}

func (x *noticeAddClientServer) SendAndClose(m *emptypb.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *noticeAddClientServer) Recv() (*ClientReq, error) {
	m := new(ClientReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Notice_DelClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoticeServer).DelClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Notice_DelClient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoticeServer).DelClient(ctx, req.(*ClientReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notice_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoticeServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Notice_SendMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoticeServer).SendMessage(ctx, req.(*SendReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notice_RecvMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Service)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NoticeServer).RecvMessage(m, &noticeRecvMessageServer{ServerStream: stream})
}

type Notice_RecvMessageServer interface {
	Send(*RecvResp) error
	grpc.ServerStream
}

type noticeRecvMessageServer struct {
	grpc.ServerStream
}

func (x *noticeRecvMessageServer) Send(m *RecvResp) error {
	return x.ServerStream.SendMsg(m)
}

// Notice_ServiceDesc is the grpc.ServiceDesc for Notice service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Notice_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.Notice",
	HandlerType: (*NoticeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Notice_Register_Handler,
		},
		{
			MethodName: "DelClient",
			Handler:    _Notice_DelClient_Handler,
		},
		{
			MethodName: "SendMessage",
			Handler:    _Notice_SendMessage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AddClient",
			Handler:       _Notice_AddClient_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "RecvMessage",
			Handler:       _Notice_RecvMessage_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/notice.proto",
}
